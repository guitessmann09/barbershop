generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String?       @unique
  email          String        @unique
  phone          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  image          String?
  stripeUserId   String?
  emailVerified  Boolean
  subscriptionId Int?
  employee       Employee?
  accounts       Account[]
  sessions       Session[]
  barber         Barber?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  orders         Order[]
  appointments   Appointment[]

  @@map("user")
}

model Service {
  id                 String               @id @default(uuid())
  name               String
  description        String
  price              Decimal              @db.Decimal(10, 2)
  imageURL           String
  durationMinutes    Int                  @default(30)
  appointmentService AppointmentService[]
}

model Product {
  id              String      @id @default(uuid())
  name            String
  price           Decimal     @db.Decimal(10, 2)
  quantityInStock Int         @default(0)
  status          Status      @default(outOfStock)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItem       OrderItem[]
}

enum Status {
  inStock
  outOfStock
}

model Order {
  id            Int      @id @default(autoincrement())
  userId        String
  appointmentId String?  @unique
  total         Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())

  user        User         @relation(fields: [userId], references: [id])
  appointment Appointment?
  items       OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   Int
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model AppointmentService {
  appointmentId String
  serviceId     String

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  service     Service     @relation(fields: [serviceId], references: [id])

  @@id([appointmentId, serviceId])
}

model Appointment {
  id        String               @id @default(uuid())
  userId    String
  date      DateTime
  barberId  Int
  orderId   Int                  @unique
  total     Decimal              @db.Decimal(10, 2)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  services  AppointmentService[]
  barber    Barber               @relation(fields: [barberId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  order     Order                @relation(fields: [orderId], references: [id])
}

model Barber {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  userName       User           @relation(fields: [name], references: [name])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  employeeId     String         @unique
  imageUrl       String?
  availabilities Availability[]
  employee       Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  blockedSlots   BlockedSlot[]
  appointments   Appointment[]
}

model Availability {
  id           Int      @id @default(autoincrement())
  barberId     Int
  weekday      Int
  startTime    String
  endTime      String
  slotDuration Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  barber       Barber   @relation(fields: [barberId], references: [id], onDelete: Cascade)
}

model BlockedSlot {
  id        Int      @id @default(autoincrement())
  barberId  Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  barber    Barber   @relation(fields: [barberId], references: [id])
}

model Subscription {
  id          Int       @id @default(autoincrement())
  name        String
  price       Decimal   @db.Decimal(10, 2)
  stripePrice String?
  benefits    Benefit[]
  user        User[]
}

model Benefit {
  id             Int          @id @default(autoincrement())
  description    String
  subscriptionID Int
  subcription    Subscription @relation(fields: [subscriptionID], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Employee {
  id     String  @id @default(uuid())
  userId String  @unique
  cargo  Cargo
  barber Barber?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Cargo {
  admin
  caixa
  barbeiro
}
