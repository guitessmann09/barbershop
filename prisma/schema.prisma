
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String        @unique
  phone          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  image          String?
  subscriptionID Int?
  stripeUserId   String?
  bookings       Booking[]
  subscription   Subscription? @relation(fields: [subscriptionID], references: [id])
  emailVerified  Boolean
  sessions       Session[]
  accounts       Account[]

  @@map("user")
}

model Service {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Decimal   @db.Decimal(10, 2)
  imageURL    String
  bookings    Booking[]
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  serviceId String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  barberId  Int
  barber    Barber   @relation(fields: [barberId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Barber {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  imageURL       String?
  password       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  availabilities Availability[]
  blockedSlots   BlockedSlot[]
  bookings       Booking[]
}

model Availability {
  id           Int      @id @default(autoincrement())
  barberId     Int
  weekday      Int
  startTime    String
  endTime      String
  slotDuration Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  barber       Barber   @relation(fields: [barberId], references: [id], onDelete: Cascade)
}

model BlockedSlot {
  id        Int      @id @default(autoincrement())
  barberId  Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  barber    Barber   @relation(fields: [barberId], references: [id])
}

model Subscription {
  id          Int       @id @default(autoincrement())
  name        String
  price       Decimal   @db.Decimal(10, 2)
  stripePrice String?
  benefits    Benefit[]
  users       User[]
}

model Benefit {
  id             Int          @id @default(autoincrement())
  description    String
  subscriptionID Int
  subcription    Subscription @relation(fields: [subscriptionID], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
